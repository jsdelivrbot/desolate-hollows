{"version":3,"sources":["../../src/controllers/users.js"],"names":["index","req","res","next","users","find","status","json","newUser","value","body","user","save","getUser","userId","params","findById","replaceUser","findByIdAndUpdate","success","updateUser","getUserCars","populate","cars","newUserCar","newCar","seller","push"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;kBAEe;AACX;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA;;;;;;;;;;;;;;;;;;;AAoBA;AACAA,WAAO,qBAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,EAA0B;AAC7B,YAAMC,QAAQ,MAAM,eAAKC,IAAL,CAAU,EAAV,CAApB;AACAH,YAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBH,KAArB;AACH,KA5DU;;AA8DXI,aAAS,uBAAOP,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,EAA0B;AAC/B,YACIK,UAAU,mBAASP,IAAIQ,KAAJ,CAAUC,IAAnB,CADd;AAAA,YAEIC,OAAO,MAAMH,QAAQI,IAAR,EAFjB;AAGAV,YAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBI,IAArB;AACH,KAnEU;;AAqEXE,aAAS,uBAAOZ,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,EAA0B;AAE3B,YAAEW,MAAF,GAAab,IAAIQ,KAAJ,CAAUM,MAAvB,CAAED,MAAF;AAAA,YACAH,IADA,GACO,MAAM,eAAKK,QAAL,CAAcF,MAAd,CADb;;AAEJZ,YAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBI,IAArB;AACH,KA1EU;;AA4EXM,iBAAa,2BAAOhB,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,EAA0B;AAE/B,YAAEW,MAAF,GAAab,IAAIQ,KAAJ,CAAUM,MAAvB,CAAED,MAAF;AAAA,YACAN,OADA,GACUP,IAAIQ,KAAJ,CAAUC,IADpB;;AAEJ,cAAM,eAAKQ,iBAAL,CAAuBJ,MAAvB,EAA+BN,OAA/B,CAAN;AACAN,YAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEY,SAAS,IAAX,EAArB;AACH,KAlFU;;AAoFXC,gBAAY,0BAAOnB,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,EAA0B;AAE9B,YAAEW,MAAF,GAAab,IAAIQ,KAAJ,CAAUM,MAAvB,CAAED,MAAF;AAAA,YACAN,OADA,GACUP,IAAIQ,KAAJ,CAAUC,IADpB;;AAEJ,cAAM,eAAKQ,iBAAL,CAAuBJ,MAAvB,EAA+BN,OAA/B,CAAN;AACAN,YAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEY,SAAS,IAAX,EAArB;AACH,KA1FU;;AA4FXE,iBAAa,2BAAOpB,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,EAA0B;AAE/B,YAAEW,MAAF,GAAab,IAAIQ,KAAJ,CAAUM,MAAvB,CAAED,MAAF;AAAA,YACAH,IADA,GACO,MAAM,eAAKK,QAAL,CAAcF,MAAd,EAAsBQ,QAAtB,CAA+B,MAA/B,CADb;;AAEJpB,YAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBI,KAAKY,IAA1B;AACH,KAjGU;;AAmGXC,gBAAY,0BAAOvB,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,EAA0B;AAE9B,YAAEW,MAAF,GAAab,IAAIQ,KAAJ,CAAUM,MAAvB,CAAED,MAAF;AAAA,YACAW,MADA,GACS,kBAAQxB,IAAIQ,KAAJ,CAAUC,IAAlB,CADT;AAAA,YAEAC,IAFA,GAEO,MAAM,eAAKK,QAAL,CAAcF,MAAd,CAFb;;AAGJW,eAAOC,MAAP,GAAgBf,IAAhB;AACA,cAAMc,OAAOb,IAAP,EAAN;AACAD,aAAKY,IAAL,CAAUI,IAAV,CAAeF,MAAf;AACA,cAAMd,KAAKC,IAAL,EAAN;AACAV,YAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBkB,MAArB;AACH;;AAIL;;;;;;;AAjHe,C","file":"users.js","sourcesContent":["import User from '../models/user';\nimport Car from '../models/car';\n\nexport default {\n    /*\n    * * * Callbacks\n    index: (req,res,next) => {\n        User.find({}, (error, users) => {\n            if(error) next(error)\n            res.status(200).json(users)\n        });\n    },\n    newUser: (req,res,next) => {\n        const newUser = new User(req.body);\n        newUser.save((err, user) => {\n            res.status(201).json({\n                success: true,\n                user\n            })\n        })\n    },\n\n    * * * Promises\n    index: (req, res, next) => \n        User.find({})\n            .then(users => res.status(200).json(users))\n            .catch(error => next(error)),\n\n    newUser: (req, res, next) => {\n        const newUser = new User(req.body);\n        newUser.save()\n            .then(user => res.status(201).json({\n                success: true,\n                user\n            }))\n            .catch(error => next(error))\n        }\n    */\n   \n    /*Async/await\n    index: async (req, res, next) => {\n        try {\n            const users = await User.find({});\n            res.status(200).json(users);\n        } catch (error) {\n            next(error);\n        }\n    },\n\n    newUser: async (req, res, next) => {\n        const newUser = new User(req.body);\n        try {\n            const user = await newUser.save();\n            res.status(201).json(user);\n        } catch (error) {\n            next(error)\n        }\n    },*/\n\n    //Using express-promise-router no need of try-catch\n    index: async (req, res, next) => {\n        const users = await User.find({});\n        res.status(200).json(users);\n    },\n\n    newUser: async (req, res, next) => {\n        const\n            newUser = new User(req.value.body),\n            user = await newUser.save();\n        res.status(201).json(user);\n    },\n\n    getUser: async (req, res, next) => {\n        const\n            { userId } = req.value.params,\n            user = await User.findById(userId);\n        res.status(200).json(user);\n    },\n\n    replaceUser: async (req, res, next) => {\n        const\n            { userId } = req.value.params,\n            newUser = req.value.body;\n        await User.findByIdAndUpdate(userId, newUser);\n        res.status(200).json({ success: true});\n    },\n\n    updateUser: async (req, res, next) => {\n        const\n            { userId } = req.value.params,\n            newUser = req.value.body;\n        await User.findByIdAndUpdate(userId, newUser);\n        res.status(200).json({ success: true});\n    },\n\n    getUserCars: async (req, res, next) => {\n        const\n            { userId } = req.value.params,\n            user = await User.findById(userId).populate('cars');\n        res.status(200).json(user.cars);\n    },\n\n    newUserCar: async (req, res, next) => {\n        const\n            { userId } = req.value.params,\n            newCar = new Car(req.value.body),\n            user = await User.findById(userId);\n        newCar.seller = user;\n        await newCar.save();\n        user.cars.push(newCar);\n        await user.save()\n        res.status(200).json(newCar);\n    },\n}\n\n\n/*\n* We can interact with mongoose in 3 different ways\n* 1) Callbacks\n* 2) Promises\n* 3 Async/Await (Promises)\n*/"]}